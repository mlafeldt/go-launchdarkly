// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PostWebhookReader is a Reader for the PostWebhook structure.
type PostWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostWebhookCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostWebhookCreated creates a PostWebhookCreated with default headers values
func NewPostWebhookCreated() *PostWebhookCreated {
	return &PostWebhookCreated{}
}

/*PostWebhookCreated handles this case with default header values.

Resource created.
*/
type PostWebhookCreated struct {
}

func (o *PostWebhookCreated) Error() string {
	return fmt.Sprintf("[POST /webhooks][%d] postWebhookCreated ", 201)
}

func (o *PostWebhookCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostWebhookBadRequest creates a PostWebhookBadRequest with default headers values
func NewPostWebhookBadRequest() *PostWebhookBadRequest {
	return &PostWebhookBadRequest{}
}

/*PostWebhookBadRequest handles this case with default header values.

Invalid request body.
*/
type PostWebhookBadRequest struct {
}

func (o *PostWebhookBadRequest) Error() string {
	return fmt.Sprintf("[POST /webhooks][%d] postWebhookBadRequest ", 400)
}

func (o *PostWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostWebhookUnauthorized creates a PostWebhookUnauthorized with default headers values
func NewPostWebhookUnauthorized() *PostWebhookUnauthorized {
	return &PostWebhookUnauthorized{}
}

/*PostWebhookUnauthorized handles this case with default header values.

Invalid access token.
*/
type PostWebhookUnauthorized struct {
}

func (o *PostWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[POST /webhooks][%d] postWebhookUnauthorized ", 401)
}

func (o *PostWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostWebhookBody post webhook body
swagger:model PostWebhookBody
*/
type PostWebhookBody struct {

	// The name of the webhook.
	Name string `json:"name,omitempty"`

	// Whether this webhook is enabled or not.
	// Required: true
	On *bool `json:"on"`

	// If sign is true, and the secret attribute is omitted, LaunchDarkly will automatically generate a secret for you.
	Secret string `json:"secret,omitempty"`

	// If sign is false, the webhook will not include a signature header, and the secret can be omitted.
	// Required: true
	Sign *bool `json:"sign"`

	// The URL of the remote webhook.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this post webhook body
func (o *PostWebhookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOn(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSign(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostWebhookBody) validateOn(formats strfmt.Registry) error {

	if err := validate.Required("webhookBody"+"."+"on", "body", o.On); err != nil {
		return err
	}

	return nil
}

func (o *PostWebhookBody) validateSign(formats strfmt.Registry) error {

	if err := validate.Required("webhookBody"+"."+"sign", "body", o.Sign); err != nil {
		return err
	}

	return nil
}

func (o *PostWebhookBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("webhookBody"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostWebhookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostWebhookBody) UnmarshalBinary(b []byte) error {
	var res PostWebhookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
