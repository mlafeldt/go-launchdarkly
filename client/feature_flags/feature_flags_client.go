// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new feature flags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for feature flags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFeatureFlag deletes a feature flag in all environments be careful only delete feature flags that are no longer being used by your application
*/
func (a *Client) DeleteFeatureFlag(params *DeleteFeatureFlagParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeatureFlagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeatureFlagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFeatureFlag",
		Method:             "DELETE",
		PathPattern:        "/flags/{projectKey}/{featureFlagKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeatureFlagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFeatureFlagNoContent), nil

}

/*
GetFeatureFlag gets a single feature flag by key
*/
func (a *Client) GetFeatureFlag(params *GetFeatureFlagParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureFlagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureFlagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureFlag",
		Method:             "GET",
		PathPattern:        "/flags/{projectKey}/{featureFlagKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureFlagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureFlagOK), nil

}

/*
GetFeatureFlagStatus gets the status for a particular feature flag
*/
func (a *Client) GetFeatureFlagStatus(params *GetFeatureFlagStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureFlagStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureFlagStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureFlagStatus",
		Method:             "GET",
		PathPattern:        "/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureFlagStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureFlagStatusOK), nil

}

/*
GetFeatureFlagStatuses gets a list of statuses for all feature flags the status includes the last time the feature flag was requested as well as the state of the flag
*/
func (a *Client) GetFeatureFlagStatuses(params *GetFeatureFlagStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureFlagStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureFlagStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureFlagStatuses",
		Method:             "GET",
		PathPattern:        "/flag-statuses/{projectKey}/{environmentKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureFlagStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureFlagStatusesOK), nil

}

/*
GetFeatureFlags gets a list of all features in the given project
*/
func (a *Client) GetFeatureFlags(params *GetFeatureFlagsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureFlagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureFlags",
		Method:             "GET",
		PathPattern:        "/flags/{projectKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureFlagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeatureFlagsOK), nil

}

/*
PatchFeatureFlag performs a partial update to a feature
*/
func (a *Client) PatchFeatureFlag(params *PatchFeatureFlagParams, authInfo runtime.ClientAuthInfoWriter) (*PatchFeatureFlagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFeatureFlagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchFeatureFlag",
		Method:             "PATCH",
		PathPattern:        "/flags/{projectKey}/{featureFlagKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchFeatureFlagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchFeatureFlagOK), nil

}

/*
PostFeatureFlag creates a new feature flag
*/
func (a *Client) PostFeatureFlag(params *PostFeatureFlagParams, authInfo runtime.ClientAuthInfoWriter) (*PostFeatureFlagCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFeatureFlagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postFeatureFlag",
		Method:             "POST",
		PathPattern:        "/flags/{projectKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFeatureFlagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFeatureFlagCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
