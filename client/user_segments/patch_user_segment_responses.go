// Code generated by go-swagger; DO NOT EDIT.

package user_segments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/mlafeldt/go-launchdarkly/models"
)

// PatchUserSegmentReader is a Reader for the PatchUserSegment structure.
type PatchUserSegmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUserSegmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchUserSegmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchUserSegmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchUserSegmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchUserSegmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchUserSegmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchUserSegmentOK creates a PatchUserSegmentOK with default headers values
func NewPatchUserSegmentOK() *PatchUserSegmentOK {
	return &PatchUserSegmentOK{}
}

/*PatchUserSegmentOK handles this case with default header values.

User segment response.
*/
type PatchUserSegmentOK struct {
	Payload *models.UserSegment
}

func (o *PatchUserSegmentOK) Error() string {
	return fmt.Sprintf("[PATCH /segments/{projectKey}/{environmentKey}/{userSegmentKey}][%d] patchUserSegmentOK  %+v", 200, o.Payload)
}

func (o *PatchUserSegmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserSegment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserSegmentBadRequest creates a PatchUserSegmentBadRequest with default headers values
func NewPatchUserSegmentBadRequest() *PatchUserSegmentBadRequest {
	return &PatchUserSegmentBadRequest{}
}

/*PatchUserSegmentBadRequest handles this case with default header values.

Invalid request body.
*/
type PatchUserSegmentBadRequest struct {
}

func (o *PatchUserSegmentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /segments/{projectKey}/{environmentKey}/{userSegmentKey}][%d] patchUserSegmentBadRequest ", 400)
}

func (o *PatchUserSegmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUserSegmentUnauthorized creates a PatchUserSegmentUnauthorized with default headers values
func NewPatchUserSegmentUnauthorized() *PatchUserSegmentUnauthorized {
	return &PatchUserSegmentUnauthorized{}
}

/*PatchUserSegmentUnauthorized handles this case with default header values.

Invalid access token.
*/
type PatchUserSegmentUnauthorized struct {
}

func (o *PatchUserSegmentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /segments/{projectKey}/{environmentKey}/{userSegmentKey}][%d] patchUserSegmentUnauthorized ", 401)
}

func (o *PatchUserSegmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUserSegmentNotFound creates a PatchUserSegmentNotFound with default headers values
func NewPatchUserSegmentNotFound() *PatchUserSegmentNotFound {
	return &PatchUserSegmentNotFound{}
}

/*PatchUserSegmentNotFound handles this case with default header values.

Invalid resource specifier.
*/
type PatchUserSegmentNotFound struct {
}

func (o *PatchUserSegmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /segments/{projectKey}/{environmentKey}/{userSegmentKey}][%d] patchUserSegmentNotFound ", 404)
}

func (o *PatchUserSegmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUserSegmentConflict creates a PatchUserSegmentConflict with default headers values
func NewPatchUserSegmentConflict() *PatchUserSegmentConflict {
	return &PatchUserSegmentConflict{}
}

/*PatchUserSegmentConflict handles this case with default header values.

Status conflict.
*/
type PatchUserSegmentConflict struct {
}

func (o *PatchUserSegmentConflict) Error() string {
	return fmt.Sprintf("[PATCH /segments/{projectKey}/{environmentKey}/{userSegmentKey}][%d] patchUserSegmentConflict ", 409)
}

func (o *PatchUserSegmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
