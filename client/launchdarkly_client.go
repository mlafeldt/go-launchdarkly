// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/mlafeldt/launchdarkly-api-client/client/audit_log"
	"github.com/mlafeldt/launchdarkly-api-client/client/custom_roles"
	"github.com/mlafeldt/launchdarkly-api-client/client/environments"
	"github.com/mlafeldt/launchdarkly-api-client/client/feature_flags"
	"github.com/mlafeldt/launchdarkly-api-client/client/projects"
	"github.com/mlafeldt/launchdarkly-api-client/client/root"
	"github.com/mlafeldt/launchdarkly-api-client/client/team_members"
	"github.com/mlafeldt/launchdarkly-api-client/client/user_segments"
	"github.com/mlafeldt/launchdarkly-api-client/client/user_settings"
	"github.com/mlafeldt/launchdarkly-api-client/client/users"
	"github.com/mlafeldt/launchdarkly-api-client/client/webhooks"
)

// Default launchdarkly HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "app.launchdarkly.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new launchdarkly HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Launchdarkly {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new launchdarkly HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Launchdarkly {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new launchdarkly client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Launchdarkly {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Launchdarkly)
	cli.Transport = transport

	cli.AuditLog = audit_log.New(transport, formats)

	cli.CustomRoles = custom_roles.New(transport, formats)

	cli.Environments = environments.New(transport, formats)

	cli.FeatureFlags = feature_flags.New(transport, formats)

	cli.Projects = projects.New(transport, formats)

	cli.Root = root.New(transport, formats)

	cli.TeamMembers = team_members.New(transport, formats)

	cli.UserSegments = user_segments.New(transport, formats)

	cli.UserSettings = user_settings.New(transport, formats)

	cli.Users = users.New(transport, formats)

	cli.Webhooks = webhooks.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Launchdarkly is a client for launchdarkly
type Launchdarkly struct {
	AuditLog *audit_log.Client

	CustomRoles *custom_roles.Client

	Environments *environments.Client

	FeatureFlags *feature_flags.Client

	Projects *projects.Client

	Root *root.Client

	TeamMembers *team_members.Client

	UserSegments *user_segments.Client

	UserSettings *user_settings.Client

	Users *users.Client

	Webhooks *webhooks.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Launchdarkly) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AuditLog.SetTransport(transport)

	c.CustomRoles.SetTransport(transport)

	c.Environments.SetTransport(transport)

	c.FeatureFlags.SetTransport(transport)

	c.Projects.SetTransport(transport)

	c.Root.SetTransport(transport)

	c.TeamMembers.SetTransport(transport)

	c.UserSegments.SetTransport(transport)

	c.UserSettings.SetTransport(transport)

	c.Users.SetTransport(transport)

	c.Webhooks.SetTransport(transport)

}
