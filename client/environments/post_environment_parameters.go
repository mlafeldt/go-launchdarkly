// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostEnvironmentParams creates a new PostEnvironmentParams object
// with the default values initialized.
func NewPostEnvironmentParams() *PostEnvironmentParams {
	var ()
	return &PostEnvironmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostEnvironmentParamsWithTimeout creates a new PostEnvironmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostEnvironmentParamsWithTimeout(timeout time.Duration) *PostEnvironmentParams {
	var ()
	return &PostEnvironmentParams{

		timeout: timeout,
	}
}

// NewPostEnvironmentParamsWithContext creates a new PostEnvironmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostEnvironmentParamsWithContext(ctx context.Context) *PostEnvironmentParams {
	var ()
	return &PostEnvironmentParams{

		Context: ctx,
	}
}

// NewPostEnvironmentParamsWithHTTPClient creates a new PostEnvironmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostEnvironmentParamsWithHTTPClient(client *http.Client) *PostEnvironmentParams {
	var ()
	return &PostEnvironmentParams{
		HTTPClient: client,
	}
}

/*PostEnvironmentParams contains all the parameters to send to the API endpoint
for the post environment operation typically these are written to a http.Request
*/
type PostEnvironmentParams struct {

	/*EnvironmentBody
	  New environment.

	*/
	EnvironmentBody PostEnvironmentBody
	/*ProjectKey
	  The project key, used to tie the flags together under one project so they can be managed together.

	*/
	ProjectKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post environment params
func (o *PostEnvironmentParams) WithTimeout(timeout time.Duration) *PostEnvironmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post environment params
func (o *PostEnvironmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post environment params
func (o *PostEnvironmentParams) WithContext(ctx context.Context) *PostEnvironmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post environment params
func (o *PostEnvironmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post environment params
func (o *PostEnvironmentParams) WithHTTPClient(client *http.Client) *PostEnvironmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post environment params
func (o *PostEnvironmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentBody adds the environmentBody to the post environment params
func (o *PostEnvironmentParams) WithEnvironmentBody(environmentBody PostEnvironmentBody) *PostEnvironmentParams {
	o.SetEnvironmentBody(environmentBody)
	return o
}

// SetEnvironmentBody adds the environmentBody to the post environment params
func (o *PostEnvironmentParams) SetEnvironmentBody(environmentBody PostEnvironmentBody) {
	o.EnvironmentBody = environmentBody
}

// WithProjectKey adds the projectKey to the post environment params
func (o *PostEnvironmentParams) WithProjectKey(projectKey string) *PostEnvironmentParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the post environment params
func (o *PostEnvironmentParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WriteToRequest writes these params to a swagger request
func (o *PostEnvironmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.EnvironmentBody); err != nil {
		return err
	}

	// path param projectKey
	if err := r.SetPathParam("projectKey", o.ProjectKey); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
