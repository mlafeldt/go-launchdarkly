// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/mlafeldt/go-launchdarkly/models"
)

// PatchProjectReader is a Reader for the PatchProject structure.
type PatchProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchProjectOK creates a PatchProjectOK with default headers values
func NewPatchProjectOK() *PatchProjectOK {
	return &PatchProjectOK{}
}

/*PatchProjectOK handles this case with default header values.

Successful Project response.
*/
type PatchProjectOK struct {
	Payload *models.Project
}

func (o *PatchProjectOK) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}][%d] patchProjectOK  %+v", 200, o.Payload)
}

func (o *PatchProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectBadRequest creates a PatchProjectBadRequest with default headers values
func NewPatchProjectBadRequest() *PatchProjectBadRequest {
	return &PatchProjectBadRequest{}
}

/*PatchProjectBadRequest handles this case with default header values.

Invalid request body.
*/
type PatchProjectBadRequest struct {
}

func (o *PatchProjectBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}][%d] patchProjectBadRequest ", 400)
}

func (o *PatchProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchProjectUnauthorized creates a PatchProjectUnauthorized with default headers values
func NewPatchProjectUnauthorized() *PatchProjectUnauthorized {
	return &PatchProjectUnauthorized{}
}

/*PatchProjectUnauthorized handles this case with default header values.

Invalid access token.
*/
type PatchProjectUnauthorized struct {
}

func (o *PatchProjectUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}][%d] patchProjectUnauthorized ", 401)
}

func (o *PatchProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchProjectNotFound creates a PatchProjectNotFound with default headers values
func NewPatchProjectNotFound() *PatchProjectNotFound {
	return &PatchProjectNotFound{}
}

/*PatchProjectNotFound handles this case with default header values.

Invalid resource specifier.
*/
type PatchProjectNotFound struct {
}

func (o *PatchProjectNotFound) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}][%d] patchProjectNotFound ", 404)
}

func (o *PatchProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchProjectConflict creates a PatchProjectConflict with default headers values
func NewPatchProjectConflict() *PatchProjectConflict {
	return &PatchProjectConflict{}
}

/*PatchProjectConflict handles this case with default header values.

Status conflict.
*/
type PatchProjectConflict struct {
}

func (o *PatchProjectConflict) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}][%d] patchProjectConflict ", 409)
}

func (o *PatchProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
