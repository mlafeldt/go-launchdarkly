// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/mlafeldt/go-launchdarkly/models"
)

// PostFeatureFlagReader is a Reader for the PostFeatureFlag structure.
type PostFeatureFlagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostFeatureFlagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostFeatureFlagCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostFeatureFlagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostFeatureFlagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostFeatureFlagConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostFeatureFlagCreated creates a PostFeatureFlagCreated with default headers values
func NewPostFeatureFlagCreated() *PostFeatureFlagCreated {
	return &PostFeatureFlagCreated{}
}

/*PostFeatureFlagCreated handles this case with default header values.

Flag response.
*/
type PostFeatureFlagCreated struct {
	Payload *models.FeatureFlag
}

func (o *PostFeatureFlagCreated) Error() string {
	return fmt.Sprintf("[POST /flags/{projectKey}][%d] postFeatureFlagCreated  %+v", 201, o.Payload)
}

func (o *PostFeatureFlagCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FeatureFlag)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFeatureFlagBadRequest creates a PostFeatureFlagBadRequest with default headers values
func NewPostFeatureFlagBadRequest() *PostFeatureFlagBadRequest {
	return &PostFeatureFlagBadRequest{}
}

/*PostFeatureFlagBadRequest handles this case with default header values.

Invalid request body.
*/
type PostFeatureFlagBadRequest struct {
}

func (o *PostFeatureFlagBadRequest) Error() string {
	return fmt.Sprintf("[POST /flags/{projectKey}][%d] postFeatureFlagBadRequest ", 400)
}

func (o *PostFeatureFlagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostFeatureFlagUnauthorized creates a PostFeatureFlagUnauthorized with default headers values
func NewPostFeatureFlagUnauthorized() *PostFeatureFlagUnauthorized {
	return &PostFeatureFlagUnauthorized{}
}

/*PostFeatureFlagUnauthorized handles this case with default header values.

Invalid access token.
*/
type PostFeatureFlagUnauthorized struct {
}

func (o *PostFeatureFlagUnauthorized) Error() string {
	return fmt.Sprintf("[POST /flags/{projectKey}][%d] postFeatureFlagUnauthorized ", 401)
}

func (o *PostFeatureFlagUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostFeatureFlagConflict creates a PostFeatureFlagConflict with default headers values
func NewPostFeatureFlagConflict() *PostFeatureFlagConflict {
	return &PostFeatureFlagConflict{}
}

/*PostFeatureFlagConflict handles this case with default header values.

Status conflict.
*/
type PostFeatureFlagConflict struct {
}

func (o *PostFeatureFlagConflict) Error() string {
	return fmt.Sprintf("[POST /flags/{projectKey}][%d] postFeatureFlagConflict ", 409)
}

func (o *PostFeatureFlagConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostFeatureFlagBody post feature flag body
swagger:model PostFeatureFlagBody
*/
type PostFeatureFlagBody struct {

	// A description of the feature flag.
	Description string `json:"description,omitempty"`

	// Whether or not this flag should be made available to the client-side JavaScript SDK.
	IncludeInSnippet bool `json:"includeInSnippet,omitempty"`

	// A unique key that will be used to reference the flag in your code.
	// Required: true
	Key *string `json:"key"`

	// A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.
	// Required: true
	Name *string `json:"name"`

	// Tags for the feature flag.
	Tags []string `json:"tags"`

	// Whether or not the flag is a temporary flag.
	Temporary bool `json:"temporary,omitempty"`

	// An array of possible variations for the flag.
	// Required: true
	Variations []*models.Variation `json:"variations"`
}

// Validate validates this post feature flag body
func (o *PostFeatureFlagBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVariations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFeatureFlagBody) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("featureFlagBody"+"."+"key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *PostFeatureFlagBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("featureFlagBody"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PostFeatureFlagBody) validateVariations(formats strfmt.Registry) error {

	if err := validate.Required("featureFlagBody"+"."+"variations", "body", o.Variations); err != nil {
		return err
	}

	for i := 0; i < len(o.Variations); i++ {
		if swag.IsZero(o.Variations[i]) { // not required
			continue
		}

		if o.Variations[i] != nil {
			if err := o.Variations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureFlagBody" + "." + "variations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostFeatureFlagBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFeatureFlagBody) UnmarshalBinary(b []byte) error {
	var res PostFeatureFlagBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
