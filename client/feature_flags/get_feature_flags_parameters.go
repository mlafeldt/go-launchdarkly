// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFeatureFlagsParams creates a new GetFeatureFlagsParams object
// with the default values initialized.
func NewGetFeatureFlagsParams() *GetFeatureFlagsParams {
	var ()
	return &GetFeatureFlagsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFeatureFlagsParamsWithTimeout creates a new GetFeatureFlagsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFeatureFlagsParamsWithTimeout(timeout time.Duration) *GetFeatureFlagsParams {
	var ()
	return &GetFeatureFlagsParams{

		timeout: timeout,
	}
}

// NewGetFeatureFlagsParamsWithContext creates a new GetFeatureFlagsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFeatureFlagsParamsWithContext(ctx context.Context) *GetFeatureFlagsParams {
	var ()
	return &GetFeatureFlagsParams{

		Context: ctx,
	}
}

// NewGetFeatureFlagsParamsWithHTTPClient creates a new GetFeatureFlagsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFeatureFlagsParamsWithHTTPClient(client *http.Client) *GetFeatureFlagsParams {
	var ()
	return &GetFeatureFlagsParams{
		HTTPClient: client,
	}
}

/*GetFeatureFlagsParams contains all the parameters to send to the API endpoint
for the get feature flags operation typically these are written to a http.Request
*/
type GetFeatureFlagsParams struct {

	/*Env
	  By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=production will restrict the returned configurations to just your production environment.

	*/
	Env *string
	/*ProjectKey
	  The project key, used to tie the flags together under one project so they can be managed together.

	*/
	ProjectKey string
	/*Tag
	  Filter by tag. A tag can be used to group flags across projects.

	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get feature flags params
func (o *GetFeatureFlagsParams) WithTimeout(timeout time.Duration) *GetFeatureFlagsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get feature flags params
func (o *GetFeatureFlagsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get feature flags params
func (o *GetFeatureFlagsParams) WithContext(ctx context.Context) *GetFeatureFlagsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get feature flags params
func (o *GetFeatureFlagsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get feature flags params
func (o *GetFeatureFlagsParams) WithHTTPClient(client *http.Client) *GetFeatureFlagsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get feature flags params
func (o *GetFeatureFlagsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnv adds the env to the get feature flags params
func (o *GetFeatureFlagsParams) WithEnv(env *string) *GetFeatureFlagsParams {
	o.SetEnv(env)
	return o
}

// SetEnv adds the env to the get feature flags params
func (o *GetFeatureFlagsParams) SetEnv(env *string) {
	o.Env = env
}

// WithProjectKey adds the projectKey to the get feature flags params
func (o *GetFeatureFlagsParams) WithProjectKey(projectKey string) *GetFeatureFlagsParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the get feature flags params
func (o *GetFeatureFlagsParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WithTag adds the tag to the get feature flags params
func (o *GetFeatureFlagsParams) WithTag(tag *string) *GetFeatureFlagsParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get feature flags params
func (o *GetFeatureFlagsParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *GetFeatureFlagsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Env != nil {

		// query param env
		var qrEnv string
		if o.Env != nil {
			qrEnv = *o.Env
		}
		qEnv := qrEnv
		if qEnv != "" {
			if err := r.SetQueryParam("env", qEnv); err != nil {
				return err
			}
		}

	}

	// path param projectKey
	if err := r.SetPathParam("projectKey", o.ProjectKey); err != nil {
		return err
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
