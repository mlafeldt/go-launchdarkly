// Code generated by go-swagger; DO NOT EDIT.

package team_members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new team members API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team members API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteMember deletes a team member by ID
*/
func (a *Client) DeleteMember(params *DeleteMemberParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMember",
		Method:             "DELETE",
		PathPattern:        "/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMemberNoContent), nil

}

/*
GetMember gets a single team member by ID
*/
func (a *Client) GetMember(params *GetMemberParams, authInfo runtime.ClientAuthInfoWriter) (*GetMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMember",
		Method:             "GET",
		PathPattern:        "/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMemberOK), nil

}

/*
GetMembers returns a list of all members in the account
*/
func (a *Client) GetMembers(params *GetMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMembers",
		Method:             "GET",
		PathPattern:        "/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMembersOK), nil

}

/*
PatchMember modifies a team member by ID
*/
func (a *Client) PatchMember(params *PatchMemberParams, authInfo runtime.ClientAuthInfoWriter) (*PatchMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchMember",
		Method:             "PATCH",
		PathPattern:        "/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchMemberOK), nil

}

/*
PostMembers invites new members
*/
func (a *Client) PostMembers(params *PostMembersParams, authInfo runtime.ClientAuthInfoWriter) (*PostMembersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postMembers",
		Method:             "POST",
		PathPattern:        "/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMembersCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
