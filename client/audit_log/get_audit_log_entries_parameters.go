// Code generated by go-swagger; DO NOT EDIT.

package audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAuditLogEntriesParams creates a new GetAuditLogEntriesParams object
// with the default values initialized.
func NewGetAuditLogEntriesParams() *GetAuditLogEntriesParams {
	var ()
	return &GetAuditLogEntriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditLogEntriesParamsWithTimeout creates a new GetAuditLogEntriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAuditLogEntriesParamsWithTimeout(timeout time.Duration) *GetAuditLogEntriesParams {
	var ()
	return &GetAuditLogEntriesParams{

		timeout: timeout,
	}
}

// NewGetAuditLogEntriesParamsWithContext creates a new GetAuditLogEntriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAuditLogEntriesParamsWithContext(ctx context.Context) *GetAuditLogEntriesParams {
	var ()
	return &GetAuditLogEntriesParams{

		Context: ctx,
	}
}

// NewGetAuditLogEntriesParamsWithHTTPClient creates a new GetAuditLogEntriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAuditLogEntriesParamsWithHTTPClient(client *http.Client) *GetAuditLogEntriesParams {
	var ()
	return &GetAuditLogEntriesParams{
		HTTPClient: client,
	}
}

/*GetAuditLogEntriesParams contains all the parameters to send to the API endpoint
for the get audit log entries operation typically these are written to a http.Request
*/
type GetAuditLogEntriesParams struct {

	/*After
	  A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp.

	*/
	After *int64
	/*Before
	  A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.

	*/
	Before *float64
	/*Limit
	  A limit on the number of audit log entries to be returned, between 1 and 20.

	*/
	Limit *float64
	/*Q
	  Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change.

	*/
	Q *string
	/*Spec
	  A resource specifier, allowing you to filter audit log listings by resource.

	*/
	Spec *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithTimeout(timeout time.Duration) *GetAuditLogEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithContext(ctx context.Context) *GetAuditLogEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithHTTPClient(client *http.Client) *GetAuditLogEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithAfter(after *int64) *GetAuditLogEntriesParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetAfter(after *int64) {
	o.After = after
}

// WithBefore adds the before to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithBefore(before *float64) *GetAuditLogEntriesParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetBefore(before *float64) {
	o.Before = before
}

// WithLimit adds the limit to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithLimit(limit *float64) *GetAuditLogEntriesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithQ adds the q to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithQ(q *string) *GetAuditLogEntriesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetQ(q *string) {
	o.Q = q
}

// WithSpec adds the spec to the get audit log entries params
func (o *GetAuditLogEntriesParams) WithSpec(spec *string) *GetAuditLogEntriesParams {
	o.SetSpec(spec)
	return o
}

// SetSpec adds the spec to the get audit log entries params
func (o *GetAuditLogEntriesParams) SetSpec(spec *string) {
	o.Spec = spec
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditLogEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter int64
		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := swag.FormatInt64(qrAfter)
		if qAfter != "" {
			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}

	}

	if o.Before != nil {

		// query param before
		var qrBefore float64
		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := swag.FormatFloat64(qrBefore)
		if qBefore != "" {
			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit float64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatFloat64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Spec != nil {

		// query param spec
		var qrSpec string
		if o.Spec != nil {
			qrSpec = *o.Spec
		}
		qSpec := qrSpec
		if qSpec != "" {
			if err := r.SetQueryParam("spec", qSpec); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
