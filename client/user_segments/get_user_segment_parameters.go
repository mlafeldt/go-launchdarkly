// Code generated by go-swagger; DO NOT EDIT.

package user_segments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUserSegmentParams creates a new GetUserSegmentParams object
// with the default values initialized.
func NewGetUserSegmentParams() *GetUserSegmentParams {
	var ()
	return &GetUserSegmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserSegmentParamsWithTimeout creates a new GetUserSegmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserSegmentParamsWithTimeout(timeout time.Duration) *GetUserSegmentParams {
	var ()
	return &GetUserSegmentParams{

		timeout: timeout,
	}
}

// NewGetUserSegmentParamsWithContext creates a new GetUserSegmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserSegmentParamsWithContext(ctx context.Context) *GetUserSegmentParams {
	var ()
	return &GetUserSegmentParams{

		Context: ctx,
	}
}

// NewGetUserSegmentParamsWithHTTPClient creates a new GetUserSegmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserSegmentParamsWithHTTPClient(client *http.Client) *GetUserSegmentParams {
	var ()
	return &GetUserSegmentParams{
		HTTPClient: client,
	}
}

/*GetUserSegmentParams contains all the parameters to send to the API endpoint
for the get user segment operation typically these are written to a http.Request
*/
type GetUserSegmentParams struct {

	/*EnvironmentKey
	  The environment key, used to tie together flag configuration and users under one environment so they can be managed together.

	*/
	EnvironmentKey string
	/*ProjectKey
	  The project key, used to tie the flags together under one project so they can be managed together.

	*/
	ProjectKey string
	/*UserSegmentKey
	  The user segment's key. The key identifies the user segment in your code.

	*/
	UserSegmentKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user segment params
func (o *GetUserSegmentParams) WithTimeout(timeout time.Duration) *GetUserSegmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user segment params
func (o *GetUserSegmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user segment params
func (o *GetUserSegmentParams) WithContext(ctx context.Context) *GetUserSegmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user segment params
func (o *GetUserSegmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user segment params
func (o *GetUserSegmentParams) WithHTTPClient(client *http.Client) *GetUserSegmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user segment params
func (o *GetUserSegmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentKey adds the environmentKey to the get user segment params
func (o *GetUserSegmentParams) WithEnvironmentKey(environmentKey string) *GetUserSegmentParams {
	o.SetEnvironmentKey(environmentKey)
	return o
}

// SetEnvironmentKey adds the environmentKey to the get user segment params
func (o *GetUserSegmentParams) SetEnvironmentKey(environmentKey string) {
	o.EnvironmentKey = environmentKey
}

// WithProjectKey adds the projectKey to the get user segment params
func (o *GetUserSegmentParams) WithProjectKey(projectKey string) *GetUserSegmentParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the get user segment params
func (o *GetUserSegmentParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WithUserSegmentKey adds the userSegmentKey to the get user segment params
func (o *GetUserSegmentParams) WithUserSegmentKey(userSegmentKey string) *GetUserSegmentParams {
	o.SetUserSegmentKey(userSegmentKey)
	return o
}

// SetUserSegmentKey adds the userSegmentKey to the get user segment params
func (o *GetUserSegmentParams) SetUserSegmentKey(userSegmentKey string) {
	o.UserSegmentKey = userSegmentKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserSegmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param environmentKey
	if err := r.SetPathParam("environmentKey", o.EnvironmentKey); err != nil {
		return err
	}

	// path param projectKey
	if err := r.SetPathParam("projectKey", o.ProjectKey); err != nil {
		return err
	}

	// path param userSegmentKey
	if err := r.SetPathParam("userSegmentKey", o.UserSegmentKey); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
