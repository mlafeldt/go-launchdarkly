// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FeatureFlagConfig feature flag config
// swagger:model FeatureFlagConfig
type FeatureFlagConfig struct {

	// archived
	Archived bool `json:"archived,omitempty"`

	// fallthrough
	Fallthrough *Fallthrough `json:"fallthrough,omitempty"`

	// goal ids
	GoalIds []string `json:"goalIds"`

	// last modified
	LastModified int64 `json:"lastModified,omitempty"`

	// off variation
	OffVariation int64 `json:"offVariation,omitempty"`

	// on
	On bool `json:"on,omitempty"`

	// prerequisites
	Prerequisites []*Prerequisite `json:"prerequisites"`

	// rules
	Rules []*Rule `json:"rules"`

	// salt
	Salt string `json:"salt,omitempty"`

	// sel
	Sel string `json:"sel,omitempty"`

	// targets
	Targets []*Target `json:"targets"`

	// Set to true to send detailed event information for this flag.
	TrackEvents bool `json:"trackEvents,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this feature flag config
func (m *FeatureFlagConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFallthrough(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrerequisites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureFlagConfig) validateFallthrough(formats strfmt.Registry) error {

	if swag.IsZero(m.Fallthrough) { // not required
		return nil
	}

	if m.Fallthrough != nil {
		if err := m.Fallthrough.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fallthrough")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureFlagConfig) validatePrerequisites(formats strfmt.Registry) error {

	if swag.IsZero(m.Prerequisites) { // not required
		return nil
	}

	for i := 0; i < len(m.Prerequisites); i++ {
		if swag.IsZero(m.Prerequisites[i]) { // not required
			continue
		}

		if m.Prerequisites[i] != nil {
			if err := m.Prerequisites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prerequisites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FeatureFlagConfig) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FeatureFlagConfig) validateTargets(formats strfmt.Registry) error {

	if swag.IsZero(m.Targets) { // not required
		return nil
	}

	for i := 0; i < len(m.Targets); i++ {
		if swag.IsZero(m.Targets[i]) { // not required
			continue
		}

		if m.Targets[i] != nil {
			if err := m.Targets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureFlagConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureFlagConfig) UnmarshalBinary(b []byte) error {
	var res FeatureFlagConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
