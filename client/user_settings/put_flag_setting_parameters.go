// Code generated by go-swagger; DO NOT EDIT.

package user_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutFlagSettingParams creates a new PutFlagSettingParams object
// with the default values initialized.
func NewPutFlagSettingParams() *PutFlagSettingParams {
	var ()
	return &PutFlagSettingParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutFlagSettingParamsWithTimeout creates a new PutFlagSettingParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutFlagSettingParamsWithTimeout(timeout time.Duration) *PutFlagSettingParams {
	var ()
	return &PutFlagSettingParams{

		timeout: timeout,
	}
}

// NewPutFlagSettingParamsWithContext creates a new PutFlagSettingParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutFlagSettingParamsWithContext(ctx context.Context) *PutFlagSettingParams {
	var ()
	return &PutFlagSettingParams{

		Context: ctx,
	}
}

// NewPutFlagSettingParamsWithHTTPClient creates a new PutFlagSettingParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutFlagSettingParamsWithHTTPClient(client *http.Client) *PutFlagSettingParams {
	var ()
	return &PutFlagSettingParams{
		HTTPClient: client,
	}
}

/*PutFlagSettingParams contains all the parameters to send to the API endpoint
for the put flag setting operation typically these are written to a http.Request
*/
type PutFlagSettingParams struct {

	/*EnvironmentKey
	  The environment key, used to tie together flag configuration and users under one environment so they can be managed together.

	*/
	EnvironmentKey string
	/*FeatureFlagKey
	  The feature flag's key. The key identifies the flag in your code.

	*/
	FeatureFlagKey string
	/*ProjectKey
	  The project key, used to tie the flags together under one project so they can be managed together.

	*/
	ProjectKey string
	/*UserKey
	  The user's key.

	*/
	UserKey string
	/*UserSettingsBody*/
	UserSettingsBody PutFlagSettingBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put flag setting params
func (o *PutFlagSettingParams) WithTimeout(timeout time.Duration) *PutFlagSettingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put flag setting params
func (o *PutFlagSettingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put flag setting params
func (o *PutFlagSettingParams) WithContext(ctx context.Context) *PutFlagSettingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put flag setting params
func (o *PutFlagSettingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put flag setting params
func (o *PutFlagSettingParams) WithHTTPClient(client *http.Client) *PutFlagSettingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put flag setting params
func (o *PutFlagSettingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentKey adds the environmentKey to the put flag setting params
func (o *PutFlagSettingParams) WithEnvironmentKey(environmentKey string) *PutFlagSettingParams {
	o.SetEnvironmentKey(environmentKey)
	return o
}

// SetEnvironmentKey adds the environmentKey to the put flag setting params
func (o *PutFlagSettingParams) SetEnvironmentKey(environmentKey string) {
	o.EnvironmentKey = environmentKey
}

// WithFeatureFlagKey adds the featureFlagKey to the put flag setting params
func (o *PutFlagSettingParams) WithFeatureFlagKey(featureFlagKey string) *PutFlagSettingParams {
	o.SetFeatureFlagKey(featureFlagKey)
	return o
}

// SetFeatureFlagKey adds the featureFlagKey to the put flag setting params
func (o *PutFlagSettingParams) SetFeatureFlagKey(featureFlagKey string) {
	o.FeatureFlagKey = featureFlagKey
}

// WithProjectKey adds the projectKey to the put flag setting params
func (o *PutFlagSettingParams) WithProjectKey(projectKey string) *PutFlagSettingParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the put flag setting params
func (o *PutFlagSettingParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WithUserKey adds the userKey to the put flag setting params
func (o *PutFlagSettingParams) WithUserKey(userKey string) *PutFlagSettingParams {
	o.SetUserKey(userKey)
	return o
}

// SetUserKey adds the userKey to the put flag setting params
func (o *PutFlagSettingParams) SetUserKey(userKey string) {
	o.UserKey = userKey
}

// WithUserSettingsBody adds the userSettingsBody to the put flag setting params
func (o *PutFlagSettingParams) WithUserSettingsBody(userSettingsBody PutFlagSettingBody) *PutFlagSettingParams {
	o.SetUserSettingsBody(userSettingsBody)
	return o
}

// SetUserSettingsBody adds the userSettingsBody to the put flag setting params
func (o *PutFlagSettingParams) SetUserSettingsBody(userSettingsBody PutFlagSettingBody) {
	o.UserSettingsBody = userSettingsBody
}

// WriteToRequest writes these params to a swagger request
func (o *PutFlagSettingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param environmentKey
	if err := r.SetPathParam("environmentKey", o.EnvironmentKey); err != nil {
		return err
	}

	// path param featureFlagKey
	if err := r.SetPathParam("featureFlagKey", o.FeatureFlagKey); err != nil {
		return err
	}

	// path param projectKey
	if err := r.SetPathParam("projectKey", o.ProjectKey); err != nil {
		return err
	}

	// path param userKey
	if err := r.SetPathParam("userKey", o.UserKey); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.UserSettingsBody); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
