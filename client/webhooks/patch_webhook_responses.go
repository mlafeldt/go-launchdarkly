// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/mlafeldt/launchdarkly-api-client/models"
)

// PatchWebhookReader is a Reader for the PatchWebhook structure.
type PatchWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchWebhookConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchWebhookOK creates a PatchWebhookOK with default headers values
func NewPatchWebhookOK() *PatchWebhookOK {
	return &PatchWebhookOK{}
}

/*PatchWebhookOK handles this case with default header values.

Webhook response.
*/
type PatchWebhookOK struct {
	Payload *models.Webhook
}

func (o *PatchWebhookOK) Error() string {
	return fmt.Sprintf("[PATCH /webhooks/{resourceId}][%d] patchWebhookOK  %+v", 200, o.Payload)
}

func (o *PatchWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Webhook)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookBadRequest creates a PatchWebhookBadRequest with default headers values
func NewPatchWebhookBadRequest() *PatchWebhookBadRequest {
	return &PatchWebhookBadRequest{}
}

/*PatchWebhookBadRequest handles this case with default header values.

Invalid request body.
*/
type PatchWebhookBadRequest struct {
}

func (o *PatchWebhookBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /webhooks/{resourceId}][%d] patchWebhookBadRequest ", 400)
}

func (o *PatchWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchWebhookUnauthorized creates a PatchWebhookUnauthorized with default headers values
func NewPatchWebhookUnauthorized() *PatchWebhookUnauthorized {
	return &PatchWebhookUnauthorized{}
}

/*PatchWebhookUnauthorized handles this case with default header values.

Invalid access token.
*/
type PatchWebhookUnauthorized struct {
}

func (o *PatchWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /webhooks/{resourceId}][%d] patchWebhookUnauthorized ", 401)
}

func (o *PatchWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchWebhookNotFound creates a PatchWebhookNotFound with default headers values
func NewPatchWebhookNotFound() *PatchWebhookNotFound {
	return &PatchWebhookNotFound{}
}

/*PatchWebhookNotFound handles this case with default header values.

Invalid resource specifier.
*/
type PatchWebhookNotFound struct {
}

func (o *PatchWebhookNotFound) Error() string {
	return fmt.Sprintf("[PATCH /webhooks/{resourceId}][%d] patchWebhookNotFound ", 404)
}

func (o *PatchWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchWebhookConflict creates a PatchWebhookConflict with default headers values
func NewPatchWebhookConflict() *PatchWebhookConflict {
	return &PatchWebhookConflict{}
}

/*PatchWebhookConflict handles this case with default header values.

Status conflict.
*/
type PatchWebhookConflict struct {
}

func (o *PatchWebhookConflict) Error() string {
	return fmt.Sprintf("[PATCH /webhooks/{resourceId}][%d] patchWebhookConflict ", 409)
}

func (o *PatchWebhookConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
