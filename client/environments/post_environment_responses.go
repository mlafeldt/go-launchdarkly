// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PostEnvironmentReader is a Reader for the PostEnvironment structure.
type PostEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostEnvironmentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostEnvironmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostEnvironmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostEnvironmentCreated creates a PostEnvironmentCreated with default headers values
func NewPostEnvironmentCreated() *PostEnvironmentCreated {
	return &PostEnvironmentCreated{}
}

/*PostEnvironmentCreated handles this case with default header values.

Resource created.
*/
type PostEnvironmentCreated struct {
}

func (o *PostEnvironmentCreated) Error() string {
	return fmt.Sprintf("[POST /projects/{projectKey}/environments][%d] postEnvironmentCreated ", 201)
}

func (o *PostEnvironmentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostEnvironmentBadRequest creates a PostEnvironmentBadRequest with default headers values
func NewPostEnvironmentBadRequest() *PostEnvironmentBadRequest {
	return &PostEnvironmentBadRequest{}
}

/*PostEnvironmentBadRequest handles this case with default header values.

Invalid request body.
*/
type PostEnvironmentBadRequest struct {
}

func (o *PostEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/{projectKey}/environments][%d] postEnvironmentBadRequest ", 400)
}

func (o *PostEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostEnvironmentUnauthorized creates a PostEnvironmentUnauthorized with default headers values
func NewPostEnvironmentUnauthorized() *PostEnvironmentUnauthorized {
	return &PostEnvironmentUnauthorized{}
}

/*PostEnvironmentUnauthorized handles this case with default header values.

Invalid access token.
*/
type PostEnvironmentUnauthorized struct {
}

func (o *PostEnvironmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projects/{projectKey}/environments][%d] postEnvironmentUnauthorized ", 401)
}

func (o *PostEnvironmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostEnvironmentConflict creates a PostEnvironmentConflict with default headers values
func NewPostEnvironmentConflict() *PostEnvironmentConflict {
	return &PostEnvironmentConflict{}
}

/*PostEnvironmentConflict handles this case with default header values.

Status conflict.
*/
type PostEnvironmentConflict struct {
}

func (o *PostEnvironmentConflict) Error() string {
	return fmt.Sprintf("[POST /projects/{projectKey}/environments][%d] postEnvironmentConflict ", 409)
}

func (o *PostEnvironmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostEnvironmentBody post environment body
swagger:model PostEnvironmentBody
*/
type PostEnvironmentBody struct {

	// A color swatch (as an RGB hex value with no leading '#', e.g. C8C8C8).
	// Required: true
	Color *string `json:"color"`

	// The default TTL for the new environment.
	DefaultTTL float64 `json:"defaultTtl,omitempty"`

	// A project-unique key for the new environment.
	// Required: true
	Key *string `json:"key"`

	// The name of the new environment.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post environment body
func (o *PostEnvironmentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostEnvironmentBody) validateColor(formats strfmt.Registry) error {

	if err := validate.Required("environmentBody"+"."+"color", "body", o.Color); err != nil {
		return err
	}

	return nil
}

func (o *PostEnvironmentBody) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("environmentBody"+"."+"key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *PostEnvironmentBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("environmentBody"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostEnvironmentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEnvironmentBody) UnmarshalBinary(b []byte) error {
	var res PostEnvironmentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
