// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Statement statement
// swagger:model Statement
type Statement struct {

	// actions
	Actions Actions `json:"actions"`

	// effect
	// Enum: [allow deny]
	Effect string `json:"effect,omitempty"`

	// Targeted actions will be those actions NOT in this list. The "actions" field must be empty to use this field.
	Notactions Actions `json:"notactions"`

	// Targeted resource will be those resources NOT in this list. The "resources`" field must be empty to use this field.
	Notresources Resources `json:"notresources"`

	// resources
	Resources Resources `json:"resources"`
}

// Validate validates this statement
func (m *Statement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotresources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Statement) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if err := m.Actions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("actions")
		}
		return err
	}

	return nil
}

var statementTypeEffectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statementTypeEffectPropEnum = append(statementTypeEffectPropEnum, v)
	}
}

const (

	// StatementEffectAllow captures enum value "allow"
	StatementEffectAllow string = "allow"

	// StatementEffectDeny captures enum value "deny"
	StatementEffectDeny string = "deny"
)

// prop value enum
func (m *Statement) validateEffectEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statementTypeEffectPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Statement) validateEffect(formats strfmt.Registry) error {

	if swag.IsZero(m.Effect) { // not required
		return nil
	}

	// value enum
	if err := m.validateEffectEnum("effect", "body", m.Effect); err != nil {
		return err
	}

	return nil
}

func (m *Statement) validateNotactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Notactions) { // not required
		return nil
	}

	if err := m.Notactions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notactions")
		}
		return err
	}

	return nil
}

func (m *Statement) validateNotresources(formats strfmt.Registry) error {

	if swag.IsZero(m.Notresources) { // not required
		return nil
	}

	if err := m.Notresources.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notresources")
		}
		return err
	}

	return nil
}

func (m *Statement) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if err := m.Resources.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resources")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Statement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Statement) UnmarshalBinary(b []byte) error {
	var res Statement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
