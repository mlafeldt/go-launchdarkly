// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/mlafeldt/launchdarkly-api-client/models"
)

// PatchEnvironmentReader is a Reader for the PatchEnvironment structure.
type PatchEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchEnvironmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchEnvironmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchEnvironmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchEnvironmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchEnvironmentOK creates a PatchEnvironmentOK with default headers values
func NewPatchEnvironmentOK() *PatchEnvironmentOK {
	return &PatchEnvironmentOK{}
}

/*PatchEnvironmentOK handles this case with default header values.

Environment response.
*/
type PatchEnvironmentOK struct {
	Payload *models.Environment
}

func (o *PatchEnvironmentOK) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}/environments/{environmentKey}][%d] patchEnvironmentOK  %+v", 200, o.Payload)
}

func (o *PatchEnvironmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Environment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEnvironmentBadRequest creates a PatchEnvironmentBadRequest with default headers values
func NewPatchEnvironmentBadRequest() *PatchEnvironmentBadRequest {
	return &PatchEnvironmentBadRequest{}
}

/*PatchEnvironmentBadRequest handles this case with default header values.

Invalid request body.
*/
type PatchEnvironmentBadRequest struct {
}

func (o *PatchEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}/environments/{environmentKey}][%d] patchEnvironmentBadRequest ", 400)
}

func (o *PatchEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchEnvironmentUnauthorized creates a PatchEnvironmentUnauthorized with default headers values
func NewPatchEnvironmentUnauthorized() *PatchEnvironmentUnauthorized {
	return &PatchEnvironmentUnauthorized{}
}

/*PatchEnvironmentUnauthorized handles this case with default header values.

Invalid access token.
*/
type PatchEnvironmentUnauthorized struct {
}

func (o *PatchEnvironmentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}/environments/{environmentKey}][%d] patchEnvironmentUnauthorized ", 401)
}

func (o *PatchEnvironmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchEnvironmentNotFound creates a PatchEnvironmentNotFound with default headers values
func NewPatchEnvironmentNotFound() *PatchEnvironmentNotFound {
	return &PatchEnvironmentNotFound{}
}

/*PatchEnvironmentNotFound handles this case with default header values.

Invalid resource specifier.
*/
type PatchEnvironmentNotFound struct {
}

func (o *PatchEnvironmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}/environments/{environmentKey}][%d] patchEnvironmentNotFound ", 404)
}

func (o *PatchEnvironmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchEnvironmentConflict creates a PatchEnvironmentConflict with default headers values
func NewPatchEnvironmentConflict() *PatchEnvironmentConflict {
	return &PatchEnvironmentConflict{}
}

/*PatchEnvironmentConflict handles this case with default header values.

Status conflict.
*/
type PatchEnvironmentConflict struct {
}

func (o *PatchEnvironmentConflict) Error() string {
	return fmt.Sprintf("[PATCH /projects/{projectKey}/environments/{environmentKey}][%d] patchEnvironmentConflict ", 409)
}

func (o *PatchEnvironmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
