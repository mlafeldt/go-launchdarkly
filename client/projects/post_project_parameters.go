// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostProjectParams creates a new PostProjectParams object
// with the default values initialized.
func NewPostProjectParams() *PostProjectParams {
	var ()
	return &PostProjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostProjectParamsWithTimeout creates a new PostProjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostProjectParamsWithTimeout(timeout time.Duration) *PostProjectParams {
	var ()
	return &PostProjectParams{

		timeout: timeout,
	}
}

// NewPostProjectParamsWithContext creates a new PostProjectParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostProjectParamsWithContext(ctx context.Context) *PostProjectParams {
	var ()
	return &PostProjectParams{

		Context: ctx,
	}
}

// NewPostProjectParamsWithHTTPClient creates a new PostProjectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostProjectParamsWithHTTPClient(client *http.Client) *PostProjectParams {
	var ()
	return &PostProjectParams{
		HTTPClient: client,
	}
}

/*PostProjectParams contains all the parameters to send to the API endpoint
for the post project operation typically these are written to a http.Request
*/
type PostProjectParams struct {

	/*ProjectBody
	  Project keys must be unique within an account.

	*/
	ProjectBody PostProjectBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post project params
func (o *PostProjectParams) WithTimeout(timeout time.Duration) *PostProjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post project params
func (o *PostProjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post project params
func (o *PostProjectParams) WithContext(ctx context.Context) *PostProjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post project params
func (o *PostProjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post project params
func (o *PostProjectParams) WithHTTPClient(client *http.Client) *PostProjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post project params
func (o *PostProjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProjectBody adds the projectBody to the post project params
func (o *PostProjectParams) WithProjectBody(projectBody PostProjectBody) *PostProjectParams {
	o.SetProjectBody(projectBody)
	return o
}

// SetProjectBody adds the projectBody to the post project params
func (o *PostProjectParams) SetProjectBody(projectBody PostProjectBody) {
	o.ProjectBody = projectBody
}

// WriteToRequest writes these params to a swagger request
func (o *PostProjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.ProjectBody); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
