// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSearchUsersParams creates a new GetSearchUsersParams object
// with the default values initialized.
func NewGetSearchUsersParams() *GetSearchUsersParams {
	var ()
	return &GetSearchUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchUsersParamsWithTimeout creates a new GetSearchUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSearchUsersParamsWithTimeout(timeout time.Duration) *GetSearchUsersParams {
	var ()
	return &GetSearchUsersParams{

		timeout: timeout,
	}
}

// NewGetSearchUsersParamsWithContext creates a new GetSearchUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSearchUsersParamsWithContext(ctx context.Context) *GetSearchUsersParams {
	var ()
	return &GetSearchUsersParams{

		Context: ctx,
	}
}

// NewGetSearchUsersParamsWithHTTPClient creates a new GetSearchUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSearchUsersParamsWithHTTPClient(client *http.Client) *GetSearchUsersParams {
	var ()
	return &GetSearchUsersParams{
		HTTPClient: client,
	}
}

/*GetSearchUsersParams contains all the parameters to send to the API endpoint
for the get search users operation typically these are written to a http.Request
*/
type GetSearchUsersParams struct {

	/*After
	  A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp.

	*/
	After *int64
	/*EnvironmentKey
	  The environment key, used to tie together flag configuration and users under one environment so they can be managed together.

	*/
	EnvironmentKey string
	/*Limit
	  Pagination limit.

	*/
	Limit *int64
	/*Offset
	  Specifies the first item to return in the collection.

	*/
	Offset *int64
	/*ProjectKey
	  The project key, used to tie the flags together under one project so they can be managed together.

	*/
	ProjectKey string
	/*Q
	  Search query.

	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get search users params
func (o *GetSearchUsersParams) WithTimeout(timeout time.Duration) *GetSearchUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get search users params
func (o *GetSearchUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get search users params
func (o *GetSearchUsersParams) WithContext(ctx context.Context) *GetSearchUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get search users params
func (o *GetSearchUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get search users params
func (o *GetSearchUsersParams) WithHTTPClient(client *http.Client) *GetSearchUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get search users params
func (o *GetSearchUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get search users params
func (o *GetSearchUsersParams) WithAfter(after *int64) *GetSearchUsersParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get search users params
func (o *GetSearchUsersParams) SetAfter(after *int64) {
	o.After = after
}

// WithEnvironmentKey adds the environmentKey to the get search users params
func (o *GetSearchUsersParams) WithEnvironmentKey(environmentKey string) *GetSearchUsersParams {
	o.SetEnvironmentKey(environmentKey)
	return o
}

// SetEnvironmentKey adds the environmentKey to the get search users params
func (o *GetSearchUsersParams) SetEnvironmentKey(environmentKey string) {
	o.EnvironmentKey = environmentKey
}

// WithLimit adds the limit to the get search users params
func (o *GetSearchUsersParams) WithLimit(limit *int64) *GetSearchUsersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get search users params
func (o *GetSearchUsersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get search users params
func (o *GetSearchUsersParams) WithOffset(offset *int64) *GetSearchUsersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get search users params
func (o *GetSearchUsersParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithProjectKey adds the projectKey to the get search users params
func (o *GetSearchUsersParams) WithProjectKey(projectKey string) *GetSearchUsersParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the get search users params
func (o *GetSearchUsersParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WithQ adds the q to the get search users params
func (o *GetSearchUsersParams) WithQ(q *string) *GetSearchUsersParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get search users params
func (o *GetSearchUsersParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter int64
		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := swag.FormatInt64(qrAfter)
		if qAfter != "" {
			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}

	}

	// path param environmentKey
	if err := r.SetPathParam("environmentKey", o.EnvironmentKey); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	// path param projectKey
	if err := r.SetPathParam("projectKey", o.ProjectKey); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
