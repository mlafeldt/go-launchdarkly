// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PostProjectReader is a Reader for the PostProject structure.
type PostProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostProjectCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostProjectCreated creates a PostProjectCreated with default headers values
func NewPostProjectCreated() *PostProjectCreated {
	return &PostProjectCreated{}
}

/*PostProjectCreated handles this case with default header values.

Resource created.
*/
type PostProjectCreated struct {
}

func (o *PostProjectCreated) Error() string {
	return fmt.Sprintf("[POST /projects][%d] postProjectCreated ", 201)
}

func (o *PostProjectCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProjectBadRequest creates a PostProjectBadRequest with default headers values
func NewPostProjectBadRequest() *PostProjectBadRequest {
	return &PostProjectBadRequest{}
}

/*PostProjectBadRequest handles this case with default header values.

Invalid request body.
*/
type PostProjectBadRequest struct {
}

func (o *PostProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects][%d] postProjectBadRequest ", 400)
}

func (o *PostProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProjectUnauthorized creates a PostProjectUnauthorized with default headers values
func NewPostProjectUnauthorized() *PostProjectUnauthorized {
	return &PostProjectUnauthorized{}
}

/*PostProjectUnauthorized handles this case with default header values.

Invalid access token.
*/
type PostProjectUnauthorized struct {
}

func (o *PostProjectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projects][%d] postProjectUnauthorized ", 401)
}

func (o *PostProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProjectConflict creates a PostProjectConflict with default headers values
func NewPostProjectConflict() *PostProjectConflict {
	return &PostProjectConflict{}
}

/*PostProjectConflict handles this case with default header values.

Status conflict.
*/
type PostProjectConflict struct {
}

func (o *PostProjectConflict) Error() string {
	return fmt.Sprintf("[POST /projects][%d] postProjectConflict ", 409)
}

func (o *PostProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostProjectBody post project body
swagger:model PostProjectBody
*/
type PostProjectBody struct {

	// key
	// Required: true
	Key *string `json:"key"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post project body
func (o *PostProjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProjectBody) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("projectBody"+"."+"key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *PostProjectBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("projectBody"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProjectBody) UnmarshalBinary(b []byte) error {
	var res PostProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
