// Code generated by go-swagger; DO NOT EDIT.

package user_segments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user segments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user segments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUserSegment deletes a user segment
*/
func (a *Client) DeleteUserSegment(params *DeleteUserSegmentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserSegmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserSegment",
		Method:             "DELETE",
		PathPattern:        "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserSegmentNoContent), nil

}

/*
GetUserSegment gets a single user segment by key
*/
func (a *Client) GetUserSegment(params *GetUserSegmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserSegment",
		Method:             "GET",
		PathPattern:        "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserSegmentOK), nil

}

/*
GetUserSegments gets a list of all user segments in the given project
*/
func (a *Client) GetUserSegments(params *GetUserSegmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserSegments",
		Method:             "GET",
		PathPattern:        "/segments/{projectKey}/{environmentKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserSegmentsOK), nil

}

/*
PatchUserSegment performs a partial update to a user segment
*/
func (a *Client) PatchUserSegment(params *PatchUserSegmentParams, authInfo runtime.ClientAuthInfoWriter) (*PatchUserSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUserSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserSegment",
		Method:             "PATCH",
		PathPattern:        "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserSegmentOK), nil

}

/*
PostUserSegment creates a new user segment
*/
func (a *Client) PostUserSegment(params *PostUserSegmentParams, authInfo runtime.ClientAuthInfoWriter) (*PostUserSegmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserSegment",
		Method:             "POST",
		PathPattern:        "/segments/{projectKey}/{environmentKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserSegmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserSegmentCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
