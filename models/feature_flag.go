// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeatureFlag feature flag
// swagger:model FeatureFlag
type FeatureFlag struct {

	// links
	Links *Links `json:"_links,omitempty"`

	// maintainer
	Maintainer *Member `json:"_maintainer,omitempty"`

	// version
	Version int64 `json:"_version,omitempty"`

	// A unix epoch time in milliseconds specifying the creation time of this flag.
	CreationDate int64 `json:"creationDate,omitempty"`

	// custom properties
	CustomProperties CustomProperties `json:"customProperties"`

	// Description of the feature flag.
	Description string `json:"description,omitempty"`

	// environments
	Environments map[string]FeatureFlagConfig `json:"environments,omitempty"`

	// include in snippet
	IncludeInSnippet bool `json:"includeInSnippet,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// Whether the feature flag is a boolean flag or multivariate.
	Kind string `json:"kind,omitempty"`

	// The ID of the member that should maintain this flag.
	MaintainerID string `json:"maintainerId,omitempty"`

	// Name of the feature flag.
	Name string `json:"name,omitempty"`

	// An array of tags for this feature flag.
	Tags []string `json:"tags"`

	// Whether or not this flag is temporary.
	Temporary bool `json:"temporary,omitempty"`

	// The variations for this feature flag.
	Variations []*Variation `json:"variations"`
}

// Validate validates this feature flag
func (m *FeatureFlag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureFlag) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureFlag) validateMaintainer(formats strfmt.Registry) error {

	if swag.IsZero(m.Maintainer) { // not required
		return nil
	}

	if m.Maintainer != nil {
		if err := m.Maintainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_maintainer")
			}
			return err
		}
	}

	return nil
}

func (m *FeatureFlag) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	if err := m.CustomProperties.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customProperties")
		}
		return err
	}

	return nil
}

func (m *FeatureFlag) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	for k := range m.Environments {

		if err := validate.Required("environments"+"."+k, "body", m.Environments[k]); err != nil {
			return err
		}
		if val, ok := m.Environments[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *FeatureFlag) validateVariations(formats strfmt.Registry) error {

	if swag.IsZero(m.Variations) { // not required
		return nil
	}

	for i := 0; i < len(m.Variations); i++ {
		if swag.IsZero(m.Variations[i]) { // not required
			continue
		}

		if m.Variations[i] != nil {
			if err := m.Variations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureFlag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureFlag) UnmarshalBinary(b []byte) error {
	var res FeatureFlag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
