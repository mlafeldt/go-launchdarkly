// Code generated by go-swagger; DO NOT EDIT.

package user_segments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PostUserSegmentReader is a Reader for the PostUserSegment structure.
type PostUserSegmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUserSegmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostUserSegmentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostUserSegmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostUserSegmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostUserSegmentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostUserSegmentCreated creates a PostUserSegmentCreated with default headers values
func NewPostUserSegmentCreated() *PostUserSegmentCreated {
	return &PostUserSegmentCreated{}
}

/*PostUserSegmentCreated handles this case with default header values.

Resource created.
*/
type PostUserSegmentCreated struct {
}

func (o *PostUserSegmentCreated) Error() string {
	return fmt.Sprintf("[POST /segments/{projectKey}/{environmentKey}][%d] postUserSegmentCreated ", 201)
}

func (o *PostUserSegmentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostUserSegmentBadRequest creates a PostUserSegmentBadRequest with default headers values
func NewPostUserSegmentBadRequest() *PostUserSegmentBadRequest {
	return &PostUserSegmentBadRequest{}
}

/*PostUserSegmentBadRequest handles this case with default header values.

Invalid request body.
*/
type PostUserSegmentBadRequest struct {
}

func (o *PostUserSegmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /segments/{projectKey}/{environmentKey}][%d] postUserSegmentBadRequest ", 400)
}

func (o *PostUserSegmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostUserSegmentUnauthorized creates a PostUserSegmentUnauthorized with default headers values
func NewPostUserSegmentUnauthorized() *PostUserSegmentUnauthorized {
	return &PostUserSegmentUnauthorized{}
}

/*PostUserSegmentUnauthorized handles this case with default header values.

Invalid access token.
*/
type PostUserSegmentUnauthorized struct {
}

func (o *PostUserSegmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /segments/{projectKey}/{environmentKey}][%d] postUserSegmentUnauthorized ", 401)
}

func (o *PostUserSegmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostUserSegmentConflict creates a PostUserSegmentConflict with default headers values
func NewPostUserSegmentConflict() *PostUserSegmentConflict {
	return &PostUserSegmentConflict{}
}

/*PostUserSegmentConflict handles this case with default header values.

Status conflict.
*/
type PostUserSegmentConflict struct {
}

func (o *PostUserSegmentConflict) Error() string {
	return fmt.Sprintf("[POST /segments/{projectKey}/{environmentKey}][%d] postUserSegmentConflict ", 409)
}

func (o *PostUserSegmentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostUserSegmentBody post user segment body
swagger:model PostUserSegmentBody
*/
type PostUserSegmentBody struct {

	// A description for the user segment.
	Description string `json:"description,omitempty"`

	// A unique key that will be used to reference the user segment in feature flags.
	// Required: true
	Key *string `json:"key"`

	// A human-friendly name for the user segment.
	// Required: true
	Name *string `json:"name"`

	// Tags for the user segment.
	Tags []string `json:"tags"`
}

// Validate validates this post user segment body
func (o *PostUserSegmentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUserSegmentBody) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("userSegmentBody"+"."+"key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *PostUserSegmentBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("userSegmentBody"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostUserSegmentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserSegmentBody) UnmarshalBinary(b []byte) error {
	var res PostUserSegmentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
