// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostFeatureFlagParams creates a new PostFeatureFlagParams object
// with the default values initialized.
func NewPostFeatureFlagParams() *PostFeatureFlagParams {
	var ()
	return &PostFeatureFlagParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostFeatureFlagParamsWithTimeout creates a new PostFeatureFlagParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostFeatureFlagParamsWithTimeout(timeout time.Duration) *PostFeatureFlagParams {
	var ()
	return &PostFeatureFlagParams{

		timeout: timeout,
	}
}

// NewPostFeatureFlagParamsWithContext creates a new PostFeatureFlagParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostFeatureFlagParamsWithContext(ctx context.Context) *PostFeatureFlagParams {
	var ()
	return &PostFeatureFlagParams{

		Context: ctx,
	}
}

// NewPostFeatureFlagParamsWithHTTPClient creates a new PostFeatureFlagParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostFeatureFlagParamsWithHTTPClient(client *http.Client) *PostFeatureFlagParams {
	var ()
	return &PostFeatureFlagParams{
		HTTPClient: client,
	}
}

/*PostFeatureFlagParams contains all the parameters to send to the API endpoint
for the post feature flag operation typically these are written to a http.Request
*/
type PostFeatureFlagParams struct {

	/*FeatureFlagBody
	  Create a new feature flag.

	*/
	FeatureFlagBody PostFeatureFlagBody
	/*ProjectKey
	  The project key, used to tie the flags together under one project so they can be managed together.

	*/
	ProjectKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post feature flag params
func (o *PostFeatureFlagParams) WithTimeout(timeout time.Duration) *PostFeatureFlagParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post feature flag params
func (o *PostFeatureFlagParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post feature flag params
func (o *PostFeatureFlagParams) WithContext(ctx context.Context) *PostFeatureFlagParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post feature flag params
func (o *PostFeatureFlagParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post feature flag params
func (o *PostFeatureFlagParams) WithHTTPClient(client *http.Client) *PostFeatureFlagParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post feature flag params
func (o *PostFeatureFlagParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFeatureFlagBody adds the featureFlagBody to the post feature flag params
func (o *PostFeatureFlagParams) WithFeatureFlagBody(featureFlagBody PostFeatureFlagBody) *PostFeatureFlagParams {
	o.SetFeatureFlagBody(featureFlagBody)
	return o
}

// SetFeatureFlagBody adds the featureFlagBody to the post feature flag params
func (o *PostFeatureFlagParams) SetFeatureFlagBody(featureFlagBody PostFeatureFlagBody) {
	o.FeatureFlagBody = featureFlagBody
}

// WithProjectKey adds the projectKey to the post feature flag params
func (o *PostFeatureFlagParams) WithProjectKey(projectKey string) *PostFeatureFlagParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the post feature flag params
func (o *PostFeatureFlagParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WriteToRequest writes these params to a swagger request
func (o *PostFeatureFlagParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.FeatureFlagBody); err != nil {
		return err
	}

	// path param projectKey
	if err := r.SetPathParam("projectKey", o.ProjectKey); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
