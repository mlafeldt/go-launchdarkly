// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeatureFlagStatus feature flag status
// swagger:model FeatureFlagStatus
type FeatureFlagStatus struct {

	// links
	Links *Links `json:"_links,omitempty"`

	// default
	Default interface{} `json:"default,omitempty"`

	// last requested
	LastRequested string `json:"lastRequested,omitempty"`

	// | Name     | Description |
	// | --------:| ----------- |
	// | new      | the feature flag was created within the last 7 days, and has not been requested yet |
	// | active   | the feature flag was requested by your servers or clients within the last 7 days |
	// | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days |
	// | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |
	//
	// Enum: [new active inactive launched]
	Name string `json:"name,omitempty"`
}

// Validate validates this feature flag status
func (m *FeatureFlagStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureFlagStatus) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var featureFlagStatusTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["new","active","inactive","launched"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		featureFlagStatusTypeNamePropEnum = append(featureFlagStatusTypeNamePropEnum, v)
	}
}

const (

	// FeatureFlagStatusNameNew captures enum value "new"
	FeatureFlagStatusNameNew string = "new"

	// FeatureFlagStatusNameActive captures enum value "active"
	FeatureFlagStatusNameActive string = "active"

	// FeatureFlagStatusNameInactive captures enum value "inactive"
	FeatureFlagStatusNameInactive string = "inactive"

	// FeatureFlagStatusNameLaunched captures enum value "launched"
	FeatureFlagStatusNameLaunched string = "launched"
)

// prop value enum
func (m *FeatureFlagStatus) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, featureFlagStatusTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FeatureFlagStatus) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureFlagStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureFlagStatus) UnmarshalBinary(b []byte) error {
	var res FeatureFlagStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
