// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUsersParams creates a new GetUsersParams object
// with the default values initialized.
func NewGetUsersParams() *GetUsersParams {
	var ()
	return &GetUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersParamsWithTimeout creates a new GetUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUsersParamsWithTimeout(timeout time.Duration) *GetUsersParams {
	var ()
	return &GetUsersParams{

		timeout: timeout,
	}
}

// NewGetUsersParamsWithContext creates a new GetUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUsersParamsWithContext(ctx context.Context) *GetUsersParams {
	var ()
	return &GetUsersParams{

		Context: ctx,
	}
}

// NewGetUsersParamsWithHTTPClient creates a new GetUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUsersParamsWithHTTPClient(client *http.Client) *GetUsersParams {
	var ()
	return &GetUsersParams{
		HTTPClient: client,
	}
}

/*GetUsersParams contains all the parameters to send to the API endpoint
for the get users operation typically these are written to a http.Request
*/
type GetUsersParams struct {

	/*EnvironmentKey
	  The environment key, used to tie together flag configuration and users under one environment so they can be managed together.

	*/
	EnvironmentKey string
	/*H
	  This parameter is required when following "next" links.

	*/
	H *string
	/*Limit
	  Pagination limit.

	*/
	Limit *int64
	/*ProjectKey
	  The project key, used to tie the flags together under one project so they can be managed together.

	*/
	ProjectKey string
	/*ScrollID
	  This parameter is required when following "next" links.

	*/
	ScrollID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get users params
func (o *GetUsersParams) WithTimeout(timeout time.Duration) *GetUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users params
func (o *GetUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users params
func (o *GetUsersParams) WithContext(ctx context.Context) *GetUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users params
func (o *GetUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) WithHTTPClient(client *http.Client) *GetUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentKey adds the environmentKey to the get users params
func (o *GetUsersParams) WithEnvironmentKey(environmentKey string) *GetUsersParams {
	o.SetEnvironmentKey(environmentKey)
	return o
}

// SetEnvironmentKey adds the environmentKey to the get users params
func (o *GetUsersParams) SetEnvironmentKey(environmentKey string) {
	o.EnvironmentKey = environmentKey
}

// WithH adds the h to the get users params
func (o *GetUsersParams) WithH(h *string) *GetUsersParams {
	o.SetH(h)
	return o
}

// SetH adds the h to the get users params
func (o *GetUsersParams) SetH(h *string) {
	o.H = h
}

// WithLimit adds the limit to the get users params
func (o *GetUsersParams) WithLimit(limit *int64) *GetUsersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get users params
func (o *GetUsersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithProjectKey adds the projectKey to the get users params
func (o *GetUsersParams) WithProjectKey(projectKey string) *GetUsersParams {
	o.SetProjectKey(projectKey)
	return o
}

// SetProjectKey adds the projectKey to the get users params
func (o *GetUsersParams) SetProjectKey(projectKey string) {
	o.ProjectKey = projectKey
}

// WithScrollID adds the scrollID to the get users params
func (o *GetUsersParams) WithScrollID(scrollID *string) *GetUsersParams {
	o.SetScrollID(scrollID)
	return o
}

// SetScrollID adds the scrollId to the get users params
func (o *GetUsersParams) SetScrollID(scrollID *string) {
	o.ScrollID = scrollID
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param environmentKey
	if err := r.SetPathParam("environmentKey", o.EnvironmentKey); err != nil {
		return err
	}

	if o.H != nil {

		// query param h
		var qrH string
		if o.H != nil {
			qrH = *o.H
		}
		qH := qrH
		if qH != "" {
			if err := r.SetQueryParam("h", qH); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param projectKey
	if err := r.SetPathParam("projectKey", o.ProjectKey); err != nil {
		return err
	}

	if o.ScrollID != nil {

		// query param scrollId
		var qrScrollID string
		if o.ScrollID != nil {
			qrScrollID = *o.ScrollID
		}
		qScrollID := qrScrollID
		if qScrollID != "" {
			if err := r.SetQueryParam("scrollId", qScrollID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
